/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: firmament_scheduler.pb.go

// Package firmament is a generated GoMock package.
package firmament

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockFirmamentSchedulerClient is a mock of FirmamentSchedulerClient interface
type MockFirmamentSchedulerClient struct {
	ctrl     *gomock.Controller
	recorder *MockFirmamentSchedulerClientMockRecorder
}

// MockFirmamentSchedulerClientMockRecorder is the mock recorder for MockFirmamentSchedulerClient
type MockFirmamentSchedulerClientMockRecorder struct {
	mock *MockFirmamentSchedulerClient
}

// NewMockFirmamentSchedulerClient creates a new mock instance
func NewMockFirmamentSchedulerClient(ctrl *gomock.Controller) *MockFirmamentSchedulerClient {
	mock := &MockFirmamentSchedulerClient{ctrl: ctrl}
	mock.recorder = &MockFirmamentSchedulerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFirmamentSchedulerClient) EXPECT() *MockFirmamentSchedulerClientMockRecorder {
	return m.recorder
}

// Schedule mocks base method
func (m *MockFirmamentSchedulerClient) Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*SchedulingDeltas, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Schedule", varargs...)
	ret0, _ := ret[0].(*SchedulingDeltas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Schedule indicates an expected call of Schedule
func (mr *MockFirmamentSchedulerClientMockRecorder) Schedule(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockFirmamentSchedulerClient)(nil).Schedule), varargs...)
}

// TaskCompleted mocks base method
func (m *MockFirmamentSchedulerClient) TaskCompleted(ctx context.Context, in *TaskUID, opts ...grpc.CallOption) (*TaskCompletedResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TaskCompleted", varargs...)
	ret0, _ := ret[0].(*TaskCompletedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskCompleted indicates an expected call of TaskCompleted
func (mr *MockFirmamentSchedulerClientMockRecorder) TaskCompleted(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskCompleted", reflect.TypeOf((*MockFirmamentSchedulerClient)(nil).TaskCompleted), varargs...)
}

// TaskFailed mocks base method
func (m *MockFirmamentSchedulerClient) TaskFailed(ctx context.Context, in *TaskUID, opts ...grpc.CallOption) (*TaskFailedResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TaskFailed", varargs...)
	ret0, _ := ret[0].(*TaskFailedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskFailed indicates an expected call of TaskFailed
func (mr *MockFirmamentSchedulerClientMockRecorder) TaskFailed(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskFailed", reflect.TypeOf((*MockFirmamentSchedulerClient)(nil).TaskFailed), varargs...)
}

// TaskRemoved mocks base method
func (m *MockFirmamentSchedulerClient) TaskRemoved(ctx context.Context, in *TaskUID, opts ...grpc.CallOption) (*TaskRemovedResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TaskRemoved", varargs...)
	ret0, _ := ret[0].(*TaskRemovedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskRemoved indicates an expected call of TaskRemoved
func (mr *MockFirmamentSchedulerClientMockRecorder) TaskRemoved(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskRemoved", reflect.TypeOf((*MockFirmamentSchedulerClient)(nil).TaskRemoved), varargs...)
}

// TaskSubmitted mocks base method
func (m *MockFirmamentSchedulerClient) TaskSubmitted(ctx context.Context, in *TaskDescription, opts ...grpc.CallOption) (*TaskSubmittedResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TaskSubmitted", varargs...)
	ret0, _ := ret[0].(*TaskSubmittedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskSubmitted indicates an expected call of TaskSubmitted
func (mr *MockFirmamentSchedulerClientMockRecorder) TaskSubmitted(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskSubmitted", reflect.TypeOf((*MockFirmamentSchedulerClient)(nil).TaskSubmitted), varargs...)
}

// TaskUpdated mocks base method
func (m *MockFirmamentSchedulerClient) TaskUpdated(ctx context.Context, in *TaskDescription, opts ...grpc.CallOption) (*TaskUpdatedResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TaskUpdated", varargs...)
	ret0, _ := ret[0].(*TaskUpdatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskUpdated indicates an expected call of TaskUpdated
func (mr *MockFirmamentSchedulerClientMockRecorder) TaskUpdated(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskUpdated", reflect.TypeOf((*MockFirmamentSchedulerClient)(nil).TaskUpdated), varargs...)
}

// NodeAdded mocks base method
func (m *MockFirmamentSchedulerClient) NodeAdded(ctx context.Context, in *ResourceTopologyNodeDescriptor, opts ...grpc.CallOption) (*NodeAddedResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeAdded", varargs...)
	ret0, _ := ret[0].(*NodeAddedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeAdded indicates an expected call of NodeAdded
func (mr *MockFirmamentSchedulerClientMockRecorder) NodeAdded(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeAdded", reflect.TypeOf((*MockFirmamentSchedulerClient)(nil).NodeAdded), varargs...)
}

// NodeFailed mocks base method
func (m *MockFirmamentSchedulerClient) NodeFailed(ctx context.Context, in *ResourceUID, opts ...grpc.CallOption) (*NodeFailedResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeFailed", varargs...)
	ret0, _ := ret[0].(*NodeFailedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeFailed indicates an expected call of NodeFailed
func (mr *MockFirmamentSchedulerClientMockRecorder) NodeFailed(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeFailed", reflect.TypeOf((*MockFirmamentSchedulerClient)(nil).NodeFailed), varargs...)
}

// NodeRemoved mocks base method
func (m *MockFirmamentSchedulerClient) NodeRemoved(ctx context.Context, in *ResourceUID, opts ...grpc.CallOption) (*NodeRemovedResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeRemoved", varargs...)
	ret0, _ := ret[0].(*NodeRemovedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeRemoved indicates an expected call of NodeRemoved
func (mr *MockFirmamentSchedulerClientMockRecorder) NodeRemoved(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeRemoved", reflect.TypeOf((*MockFirmamentSchedulerClient)(nil).NodeRemoved), varargs...)
}

// NodeUpdated mocks base method
func (m *MockFirmamentSchedulerClient) NodeUpdated(ctx context.Context, in *ResourceTopologyNodeDescriptor, opts ...grpc.CallOption) (*NodeUpdatedResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeUpdated", varargs...)
	ret0, _ := ret[0].(*NodeUpdatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeUpdated indicates an expected call of NodeUpdated
func (mr *MockFirmamentSchedulerClientMockRecorder) NodeUpdated(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeUpdated", reflect.TypeOf((*MockFirmamentSchedulerClient)(nil).NodeUpdated), varargs...)
}

// AddTaskStats mocks base method
func (m *MockFirmamentSchedulerClient) AddTaskStats(ctx context.Context, in *TaskStats, opts ...grpc.CallOption) (*TaskStatsResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTaskStats", varargs...)
	ret0, _ := ret[0].(*TaskStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTaskStats indicates an expected call of AddTaskStats
func (mr *MockFirmamentSchedulerClientMockRecorder) AddTaskStats(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTaskStats", reflect.TypeOf((*MockFirmamentSchedulerClient)(nil).AddTaskStats), varargs...)
}

// AddNodeStats mocks base method
func (m *MockFirmamentSchedulerClient) AddNodeStats(ctx context.Context, in *ResourceStats, opts ...grpc.CallOption) (*ResourceStatsResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddNodeStats", varargs...)
	ret0, _ := ret[0].(*ResourceStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNodeStats indicates an expected call of AddNodeStats
func (mr *MockFirmamentSchedulerClientMockRecorder) AddNodeStats(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNodeStats", reflect.TypeOf((*MockFirmamentSchedulerClient)(nil).AddNodeStats), varargs...)
}

// Check mocks base method
func (m *MockFirmamentSchedulerClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Check", varargs...)
	ret0, _ := ret[0].(*HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check
func (mr *MockFirmamentSchedulerClientMockRecorder) Check(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockFirmamentSchedulerClient)(nil).Check), varargs...)
}

// AddTaskInfo mocks base method
func (m *MockFirmamentSchedulerClient) AddTaskInfo(ctx context.Context, in *TaskInfo, opts ...grpc.CallOption) (*TaskInfoResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTaskInfo", varargs...)
	ret0, _ := ret[0].(*TaskInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTaskInfo indicates an expected call of AddTaskInfo
func (mr *MockFirmamentSchedulerClientMockRecorder) AddTaskInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTaskInfo", reflect.TypeOf((*MockFirmamentSchedulerClient)(nil).AddTaskInfo), varargs...)
}

// MockFirmamentSchedulerServer is a mock of FirmamentSchedulerServer interface
type MockFirmamentSchedulerServer struct {
	ctrl     *gomock.Controller
	recorder *MockFirmamentSchedulerServerMockRecorder
}

// MockFirmamentSchedulerServerMockRecorder is the mock recorder for MockFirmamentSchedulerServer
type MockFirmamentSchedulerServerMockRecorder struct {
	mock *MockFirmamentSchedulerServer
}

// NewMockFirmamentSchedulerServer creates a new mock instance
func NewMockFirmamentSchedulerServer(ctrl *gomock.Controller) *MockFirmamentSchedulerServer {
	mock := &MockFirmamentSchedulerServer{ctrl: ctrl}
	mock.recorder = &MockFirmamentSchedulerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFirmamentSchedulerServer) EXPECT() *MockFirmamentSchedulerServerMockRecorder {
	return m.recorder
}

// Schedule mocks base method
func (m *MockFirmamentSchedulerServer) Schedule(arg0 context.Context, arg1 *ScheduleRequest) (*SchedulingDeltas, error) {
	ret := m.ctrl.Call(m, "Schedule", arg0, arg1)
	ret0, _ := ret[0].(*SchedulingDeltas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Schedule indicates an expected call of Schedule
func (mr *MockFirmamentSchedulerServerMockRecorder) Schedule(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockFirmamentSchedulerServer)(nil).Schedule), arg0, arg1)
}

// TaskCompleted mocks base method
func (m *MockFirmamentSchedulerServer) TaskCompleted(arg0 context.Context, arg1 *TaskUID) (*TaskCompletedResponse, error) {
	ret := m.ctrl.Call(m, "TaskCompleted", arg0, arg1)
	ret0, _ := ret[0].(*TaskCompletedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskCompleted indicates an expected call of TaskCompleted
func (mr *MockFirmamentSchedulerServerMockRecorder) TaskCompleted(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskCompleted", reflect.TypeOf((*MockFirmamentSchedulerServer)(nil).TaskCompleted), arg0, arg1)
}

// TaskFailed mocks base method
func (m *MockFirmamentSchedulerServer) TaskFailed(arg0 context.Context, arg1 *TaskUID) (*TaskFailedResponse, error) {
	ret := m.ctrl.Call(m, "TaskFailed", arg0, arg1)
	ret0, _ := ret[0].(*TaskFailedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskFailed indicates an expected call of TaskFailed
func (mr *MockFirmamentSchedulerServerMockRecorder) TaskFailed(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskFailed", reflect.TypeOf((*MockFirmamentSchedulerServer)(nil).TaskFailed), arg0, arg1)
}

// TaskRemoved mocks base method
func (m *MockFirmamentSchedulerServer) TaskRemoved(arg0 context.Context, arg1 *TaskUID) (*TaskRemovedResponse, error) {
	ret := m.ctrl.Call(m, "TaskRemoved", arg0, arg1)
	ret0, _ := ret[0].(*TaskRemovedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskRemoved indicates an expected call of TaskRemoved
func (mr *MockFirmamentSchedulerServerMockRecorder) TaskRemoved(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskRemoved", reflect.TypeOf((*MockFirmamentSchedulerServer)(nil).TaskRemoved), arg0, arg1)
}

// TaskSubmitted mocks base method
func (m *MockFirmamentSchedulerServer) TaskSubmitted(arg0 context.Context, arg1 *TaskDescription) (*TaskSubmittedResponse, error) {
	ret := m.ctrl.Call(m, "TaskSubmitted", arg0, arg1)
	ret0, _ := ret[0].(*TaskSubmittedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskSubmitted indicates an expected call of TaskSubmitted
func (mr *MockFirmamentSchedulerServerMockRecorder) TaskSubmitted(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskSubmitted", reflect.TypeOf((*MockFirmamentSchedulerServer)(nil).TaskSubmitted), arg0, arg1)
}

// TaskUpdated mocks base method
func (m *MockFirmamentSchedulerServer) TaskUpdated(arg0 context.Context, arg1 *TaskDescription) (*TaskUpdatedResponse, error) {
	ret := m.ctrl.Call(m, "TaskUpdated", arg0, arg1)
	ret0, _ := ret[0].(*TaskUpdatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskUpdated indicates an expected call of TaskUpdated
func (mr *MockFirmamentSchedulerServerMockRecorder) TaskUpdated(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskUpdated", reflect.TypeOf((*MockFirmamentSchedulerServer)(nil).TaskUpdated), arg0, arg1)
}

// NodeAdded mocks base method
func (m *MockFirmamentSchedulerServer) NodeAdded(arg0 context.Context, arg1 *ResourceTopologyNodeDescriptor) (*NodeAddedResponse, error) {
	ret := m.ctrl.Call(m, "NodeAdded", arg0, arg1)
	ret0, _ := ret[0].(*NodeAddedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeAdded indicates an expected call of NodeAdded
func (mr *MockFirmamentSchedulerServerMockRecorder) NodeAdded(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeAdded", reflect.TypeOf((*MockFirmamentSchedulerServer)(nil).NodeAdded), arg0, arg1)
}

// NodeFailed mocks base method
func (m *MockFirmamentSchedulerServer) NodeFailed(arg0 context.Context, arg1 *ResourceUID) (*NodeFailedResponse, error) {
	ret := m.ctrl.Call(m, "NodeFailed", arg0, arg1)
	ret0, _ := ret[0].(*NodeFailedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeFailed indicates an expected call of NodeFailed
func (mr *MockFirmamentSchedulerServerMockRecorder) NodeFailed(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeFailed", reflect.TypeOf((*MockFirmamentSchedulerServer)(nil).NodeFailed), arg0, arg1)
}

// NodeRemoved mocks base method
func (m *MockFirmamentSchedulerServer) NodeRemoved(arg0 context.Context, arg1 *ResourceUID) (*NodeRemovedResponse, error) {
	ret := m.ctrl.Call(m, "NodeRemoved", arg0, arg1)
	ret0, _ := ret[0].(*NodeRemovedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeRemoved indicates an expected call of NodeRemoved
func (mr *MockFirmamentSchedulerServerMockRecorder) NodeRemoved(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeRemoved", reflect.TypeOf((*MockFirmamentSchedulerServer)(nil).NodeRemoved), arg0, arg1)
}

// NodeUpdated mocks base method
func (m *MockFirmamentSchedulerServer) NodeUpdated(arg0 context.Context, arg1 *ResourceTopologyNodeDescriptor) (*NodeUpdatedResponse, error) {
	ret := m.ctrl.Call(m, "NodeUpdated", arg0, arg1)
	ret0, _ := ret[0].(*NodeUpdatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeUpdated indicates an expected call of NodeUpdated
func (mr *MockFirmamentSchedulerServerMockRecorder) NodeUpdated(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeUpdated", reflect.TypeOf((*MockFirmamentSchedulerServer)(nil).NodeUpdated), arg0, arg1)
}

// AddTaskStats mocks base method
func (m *MockFirmamentSchedulerServer) AddTaskStats(arg0 context.Context, arg1 *TaskStats) (*TaskStatsResponse, error) {
	ret := m.ctrl.Call(m, "AddTaskStats", arg0, arg1)
	ret0, _ := ret[0].(*TaskStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTaskStats indicates an expected call of AddTaskStats
func (mr *MockFirmamentSchedulerServerMockRecorder) AddTaskStats(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTaskStats", reflect.TypeOf((*MockFirmamentSchedulerServer)(nil).AddTaskStats), arg0, arg1)
}

// AddNodeStats mocks base method
func (m *MockFirmamentSchedulerServer) AddNodeStats(arg0 context.Context, arg1 *ResourceStats) (*ResourceStatsResponse, error) {
	ret := m.ctrl.Call(m, "AddNodeStats", arg0, arg1)
	ret0, _ := ret[0].(*ResourceStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNodeStats indicates an expected call of AddNodeStats
func (mr *MockFirmamentSchedulerServerMockRecorder) AddNodeStats(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNodeStats", reflect.TypeOf((*MockFirmamentSchedulerServer)(nil).AddNodeStats), arg0, arg1)
}

// Check mocks base method
func (m *MockFirmamentSchedulerServer) Check(arg0 context.Context, arg1 *HealthCheckRequest) (*HealthCheckResponse, error) {
	ret := m.ctrl.Call(m, "Check", arg0, arg1)
	ret0, _ := ret[0].(*HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check
func (mr *MockFirmamentSchedulerServerMockRecorder) Check(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockFirmamentSchedulerServer)(nil).Check), arg0, arg1)
}

// AddTaskInfo mocks base method
func (m *MockFirmamentSchedulerServer) AddTaskInfo(arg0 context.Context, arg1 *TaskInfo) (*TaskInfoResponse, error) {
	ret := m.ctrl.Call(m, "AddTaskInfo", arg0, arg1)
	ret0, _ := ret[0].(*TaskInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTaskInfo indicates an expected call of AddTaskInfo
func (mr *MockFirmamentSchedulerServerMockRecorder) AddTaskInfo(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTaskInfo", reflect.TypeOf((*MockFirmamentSchedulerServer)(nil).AddTaskInfo), arg0, arg1)
}
