/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: affinity.proto

/*
Package firmament is a generated protocol buffer package.

It is generated from these files:
	affinity.proto
	coco_interference_scores.proto
	firmament_scheduler.proto
	job_desc.proto
	label.proto
	label_selector.proto
	node_affinity.proto
	pod_affinity.proto
	pod_anti_affinity.proto
	reference_desc.proto
	resource_desc.proto
	resource_stats.proto
	resource_topology_node_desc.proto
	resource_vector.proto
	scheduling_delta.proto
	task_desc.proto
	task_final_report.proto
	task_stats.proto
	whare_map_stats.proto

It has these top-level messages:
	Affinity
	CoCoInterferenceScores
	ScheduleRequest
	SchedulingDeltas
	TaskCompletedResponse
	TaskDescription
	TaskSubmittedResponse
	TaskRemovedResponse
	TaskFailedResponse
	TaskUpdatedResponse
	NodeAddedResponse
	NodeRemovedResponse
	NodeFailedResponse
	NodeUpdatedResponse
	TaskStatsResponse
	ResourceStatsResponse
	TaskUID
	ResourceUID
	HealthCheckRequest
	HealthCheckResponse
	JobDescriptor
	Label
	LabelSelector
	NodeSelectorRequirement
	NodeSelectorTerm
	NodeSelector
	PreferredSchedulingTerm
	NodeAffinity
	MatchLabels
	LabelSelectorRequirement
	PodLabelSelector
	PodAffinityTerm
	WeightedPodAffinityTerm
	PodAffinity
	MatchLabelsAntiAff
	LabelSelectorRequirementAntiAff
	LabelSelectorAntiAff
	PodAffinityTermAntiAff
	WeightedPodAffinityTermAntiAff
	PodAntiAffinity
	ReferenceDescriptor
	ResourceDescriptor
	ResourceStats
	CpuStats
	ResourceTopologyNodeDescriptor
	ResourceVector
	SchedulingDelta
	TaskDescriptor
	TaskFinalReport
	TaskStats
	WhareMapStats
*/
package firmament

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Affinity struct {
	NodeAffinity    *NodeAffinity    `protobuf:"bytes,1,opt,name=node_affinity,json=nodeAffinity" json:"node_affinity,omitempty"`
	PodAffinity     *PodAffinity     `protobuf:"bytes,2,opt,name=pod_affinity,json=podAffinity" json:"pod_affinity,omitempty"`
	PodAntiAffinity *PodAntiAffinity `protobuf:"bytes,3,opt,name=pod_anti_affinity,json=podAntiAffinity" json:"pod_anti_affinity,omitempty"`
}

func (m *Affinity) Reset()                    { *m = Affinity{} }
func (m *Affinity) String() string            { return proto.CompactTextString(m) }
func (*Affinity) ProtoMessage()               {}
func (*Affinity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Affinity) GetNodeAffinity() *NodeAffinity {
	if m != nil {
		return m.NodeAffinity
	}
	return nil
}

func (m *Affinity) GetPodAffinity() *PodAffinity {
	if m != nil {
		return m.PodAffinity
	}
	return nil
}

func (m *Affinity) GetPodAntiAffinity() *PodAntiAffinity {
	if m != nil {
		return m.PodAntiAffinity
	}
	return nil
}

func init() {
	proto.RegisterType((*Affinity)(nil), "firmament.Affinity")
}

func init() { proto.RegisterFile("affinity.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 162 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x4c, 0x4b, 0xcb,
	0xcc, 0xcb, 0x2c, 0xa9, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0xcb, 0x2c, 0xca,
	0x4d, 0xcc, 0x4d, 0xcd, 0x2b, 0x91, 0x12, 0xce, 0xcb, 0x4f, 0x49, 0x8d, 0x47, 0x95, 0x97, 0x12,
	0x2a, 0xc8, 0x4f, 0x41, 0x17, 0x13, 0x07, 0x8b, 0xe5, 0x95, 0x64, 0xa2, 0x49, 0x28, 0x9d, 0x66,
	0xe4, 0xe2, 0x70, 0x84, 0x0a, 0x09, 0xd9, 0x70, 0xf1, 0xa2, 0x18, 0x28, 0xc1, 0xa8, 0xc0, 0xa8,
	0xc1, 0x6d, 0x24, 0xae, 0x07, 0xb7, 0x51, 0xcf, 0x2f, 0x3f, 0x25, 0x15, 0xa6, 0x3e, 0x88, 0x27,
	0x0f, 0x89, 0x27, 0x64, 0xc9, 0xc5, 0x83, 0x6c, 0xb3, 0x04, 0x13, 0x58, 0xb3, 0x18, 0x92, 0xe6,
	0x80, 0xfc, 0x14, 0xb8, 0x5e, 0xee, 0x02, 0x04, 0x47, 0xc8, 0x8d, 0x4b, 0x10, 0xc3, 0x81, 0x12,
	0xcc, 0x60, 0xfd, 0x52, 0x68, 0xfa, 0xf3, 0x4a, 0x32, 0xe1, 0x66, 0xf0, 0x17, 0xa0, 0x0a, 0x24,
	0xb1, 0x81, 0x3d, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x14, 0xfe, 0x5c, 0x33, 0x01,
	0x00, 0x00,
}
