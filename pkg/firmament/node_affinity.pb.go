/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node_affinity.proto

package firmament

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NodeSelectorRequirement struct {
	Key      string   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Operator string   `protobuf:"bytes,2,opt,name=operator" json:"operator,omitempty"`
	Values   []string `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (m *NodeSelectorRequirement) Reset()                    { *m = NodeSelectorRequirement{} }
func (m *NodeSelectorRequirement) String() string            { return proto.CompactTextString(m) }
func (*NodeSelectorRequirement) ProtoMessage()               {}
func (*NodeSelectorRequirement) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *NodeSelectorRequirement) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *NodeSelectorRequirement) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *NodeSelectorRequirement) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type NodeSelectorTerm struct {
	// A list of node selector requirements by node's labels.
	// +optional
	MatchExpressions []*NodeSelectorRequirement `protobuf:"bytes,1,rep,name=matchExpressions" json:"matchExpressions,omitempty"`
}

func (m *NodeSelectorTerm) Reset()                    { *m = NodeSelectorTerm{} }
func (m *NodeSelectorTerm) String() string            { return proto.CompactTextString(m) }
func (*NodeSelectorTerm) ProtoMessage()               {}
func (*NodeSelectorTerm) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *NodeSelectorTerm) GetMatchExpressions() []*NodeSelectorRequirement {
	if m != nil {
		return m.MatchExpressions
	}
	return nil
}

type NodeSelector struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms []*NodeSelectorTerm `protobuf:"bytes,1,rep,name=nodeSelectorTerms" json:"nodeSelectorTerms,omitempty"`
}

func (m *NodeSelector) Reset()                    { *m = NodeSelector{} }
func (m *NodeSelector) String() string            { return proto.CompactTextString(m) }
func (*NodeSelector) ProtoMessage()               {}
func (*NodeSelector) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *NodeSelector) GetNodeSelectorTerms() []*NodeSelectorTerm {
	if m != nil {
		return m.NodeSelectorTerms
	}
	return nil
}

type PreferredSchedulingTerm struct {
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight int32 `protobuf:"varint,1,opt,name=weight" json:"weight,omitempty"`
	// A node selector term, associated with the corresponding weight.
	Preference *NodeSelectorTerm `protobuf:"bytes,2,opt,name=preference" json:"preference,omitempty"`
}

func (m *PreferredSchedulingTerm) Reset()                    { *m = PreferredSchedulingTerm{} }
func (m *PreferredSchedulingTerm) String() string            { return proto.CompactTextString(m) }
func (*PreferredSchedulingTerm) ProtoMessage()               {}
func (*PreferredSchedulingTerm) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *PreferredSchedulingTerm) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *PreferredSchedulingTerm) GetPreference() *NodeSelectorTerm {
	if m != nil {
		return m.Preference
	}
	return nil
}

type NodeAffinity struct {
	RequiredDuringSchedulingIgnoredDuringExecution  *NodeSelector              `protobuf:"bytes,1,opt,name=requiredDuringSchedulingIgnoredDuringExecution" json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
	PreferredDuringSchedulingIgnoredDuringExecution []*PreferredSchedulingTerm `protobuf:"bytes,2,rep,name=preferredDuringSchedulingIgnoredDuringExecution" json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

func (m *NodeAffinity) Reset()                    { *m = NodeAffinity{} }
func (m *NodeAffinity) String() string            { return proto.CompactTextString(m) }
func (*NodeAffinity) ProtoMessage()               {}
func (*NodeAffinity) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *NodeAffinity) GetRequiredDuringSchedulingIgnoredDuringExecution() *NodeSelector {
	if m != nil {
		return m.RequiredDuringSchedulingIgnoredDuringExecution
	}
	return nil
}

func (m *NodeAffinity) GetPreferredDuringSchedulingIgnoredDuringExecution() []*PreferredSchedulingTerm {
	if m != nil {
		return m.PreferredDuringSchedulingIgnoredDuringExecution
	}
	return nil
}

func init() {
	proto.RegisterType((*NodeSelectorRequirement)(nil), "firmament.NodeSelectorRequirement")
	proto.RegisterType((*NodeSelectorTerm)(nil), "firmament.NodeSelectorTerm")
	proto.RegisterType((*NodeSelector)(nil), "firmament.NodeSelector")
	proto.RegisterType((*PreferredSchedulingTerm)(nil), "firmament.PreferredSchedulingTerm")
	proto.RegisterType((*NodeAffinity)(nil), "firmament.NodeAffinity")
}

func init() { proto.RegisterFile("node_affinity.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcf, 0x4e, 0xf2, 0x40,
	0x10, 0x4f, 0x69, 0x3e, 0xf2, 0x31, 0x78, 0xc0, 0x35, 0x81, 0x46, 0x2f, 0x64, 0x4f, 0x9c, 0x6a,
	0x82, 0x47, 0x4f, 0x26, 0x72, 0xe0, 0x42, 0xcc, 0xe2, 0xc5, 0x13, 0x29, 0xed, 0xb4, 0x6c, 0xa4,
	0xbb, 0x75, 0xba, 0x55, 0x38, 0xf9, 0x02, 0x3e, 0x83, 0xcf, 0x6a, 0x58, 0xa0, 0x36, 0x36, 0x8d,
	0x72, 0xeb, 0x4c, 0xe7, 0x37, 0xbf, 0x3f, 0xb3, 0x70, 0xa1, 0x74, 0x84, 0x8b, 0x20, 0x8e, 0xa5,
	0x92, 0x66, 0xeb, 0x67, 0xa4, 0x8d, 0x66, 0x9d, 0x58, 0x52, 0x1a, 0xa4, 0xa8, 0x0c, 0x5f, 0xc0,
	0x60, 0xa6, 0x23, 0x9c, 0xe3, 0x1a, 0x43, 0xa3, 0x49, 0xe0, 0x4b, 0x21, 0x09, 0x77, 0xbf, 0x58,
	0x0f, 0xdc, 0x67, 0xdc, 0x7a, 0xce, 0xd0, 0x19, 0x75, 0xc4, 0xee, 0x93, 0x5d, 0xc2, 0x7f, 0x9d,
	0x21, 0x05, 0x46, 0x93, 0xd7, 0xb2, 0xed, 0xb2, 0x66, 0x7d, 0x68, 0xbf, 0x06, 0xeb, 0x02, 0x73,
	0xcf, 0x1d, 0xba, 0xa3, 0x8e, 0x38, 0x54, 0x7c, 0x09, 0xbd, 0x2a, 0xc1, 0x23, 0x52, 0xca, 0x66,
	0xd0, 0x4b, 0x03, 0x13, 0xae, 0x26, 0x9b, 0x8c, 0x30, 0xcf, 0xa5, 0x56, 0xb9, 0xe7, 0x0c, 0xdd,
	0x51, 0x77, 0xcc, 0xfd, 0x52, 0x9a, 0xdf, 0xa0, 0x4b, 0xd4, 0xb0, 0xfc, 0x09, 0xce, 0xaa, 0xc3,
	0x6c, 0x0a, 0xe7, 0xea, 0x07, 0xe7, 0x91, 0xe0, 0xaa, 0x81, 0x60, 0x37, 0x23, 0xea, 0x28, 0xae,
	0x60, 0xf0, 0x40, 0x18, 0x23, 0x11, 0x46, 0xf3, 0x70, 0x85, 0x51, 0xb1, 0x96, 0x2a, 0xb1, 0x2e,
	0xfa, 0xd0, 0x7e, 0x43, 0x99, 0xac, 0x8c, 0x8d, 0xe8, 0x9f, 0x38, 0x54, 0xec, 0x16, 0x20, 0xb3,
	0x10, 0x54, 0x21, 0xda, 0x9c, 0x7e, 0xa1, 0xad, 0x8c, 0xf3, 0xcf, 0xd6, 0xde, 0xcb, 0xdd, 0xe1,
	0x62, 0xec, 0x1d, 0x7c, 0xda, 0x9b, 0x8f, 0xee, 0x0b, 0x92, 0x2a, 0xf9, 0x56, 0x31, 0x4d, 0x94,
	0x2e, 0xdb, 0x93, 0x0d, 0x86, 0x85, 0x91, 0x5a, 0x59, 0x35, 0xdd, 0xf1, 0xa0, 0x29, 0xc9, 0x13,
	0xd7, 0xb1, 0x0f, 0x07, 0xae, 0xb3, 0x63, 0x04, 0x7f, 0x94, 0xd0, 0xaa, 0x1d, 0xb3, 0x21, 0x44,
	0x71, 0xea, 0xea, 0x65, 0xdb, 0x3e, 0xe1, 0x9b, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x95,
	0x53, 0x45, 0xd9, 0x02, 0x00, 0x00,
}
